q1. head - tail - sample

SELECT * FROM laptops
ORDER BY `index` LIMIT 5; 

SELECT * FROM laptops
ORDER BY `index` DESC LIMIT 5;

SELECT * FROM laptops
ORDER BY rand() LIMIT 5;

------------------------------------------------------
2.         ------ for numerical cols----------

- 8 number summary[count,min,max,mean,std,q1,q2,q3]
SELECT COUNT(Price) OVER(),
MIN(Price) OVER(),
MAX(Price) OVER(),
AVG(Price) OVER(),
STD(Price) OVER(),
PERCENTILE_CONT(0.25) WITHIN GROUP(ORDER BY Price) OVER() AS 'Q1',
PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY Price) OVER() AS 'Median',
PERCENTILE_CONT(0.75) WITHIN GROUP(ORDER BY Price) OVER() AS 'Q3'
FROM laptops
ORDER BY `index` LIMIT 1;

- missing values

SELECT COUNT(Price)
FROM laptops
WHERE Price IS NULL;

- outliers

SELECT * FROM (SELECT *,
PERCENTILE_CONT(0.25) WITHIN GROUP(ORDER BY Price) OVER() AS 'Q1',
PERCENTILE_CONT(0.75) WITHIN GROUP(ORDER BY Price) OVER() AS 'Q3'
FROM laptops) t
WHERE t.Price < t.Q1 - (1.5*(t.Q3 - t.Q1)) OR
t.Price > t.Q3 + (1.5*(t.Q3 - t.Q1));

- horizontal/vertical histograms

SELECT t.buckets,REPEAT('*',COUNT(*)/5) FROM (SELECT price, 
CASE 
	WHEN price BETWEEN 0 AND 25000 THEN '0-25K'
    WHEN price BETWEEN 25001 AND 50000 THEN '25K-50K'
    WHEN price BETWEEN 50001 AND 75000 THEN '50K-75K'
    WHEN price BETWEEN 75001 AND 100000 THEN '75K-100K'
	ELSE '>100K'
END AS 'buckets'
FROM laptops) t
GROUP BY t.buckets;

------------------------------------------------------------------------
3. for categorical cols
    - value counts - pie chart

	SELECT Company,COUNT(Company) FROM laptops
	GROUP BY Company;

    - missing value
----------------------------------------------------------------------

4. numerical - numerical
    - side by side 8 number analysis--
    - scatterplot
	SELECT cpu_speed,Price FROM laptops;

	SELECT * FROM laptops;

    - correlation
----------------------------------------------------------------
5. categorical-categorical
    - contigency table - stacked bar chart

	SELECT Company,
	SUM(CASE WHEN Touchscreen = 1 THEN 1 ELSE 0 END) AS 	'Touchscreen_yes',
	SUM(CASE WHEN Touchscreen = 0 THEN 1 ELSE 0 END) AS 'Touchscreen_no'
	FROM laptops
	GROUP BY Company;
	
	SELECT Company,
	SUM(CASE WHEN cpu_brand = 'Intel' THEN 1 ELSE 0 END) AS 'intel',
	SUM(CASE WHEN cpu_brand = 'AMD' THEN 1 ELSE 0 END) AS 'amd',
	SUM(CASE WHEN cpu_brand = 'Samsung' THEN 1 ELSE 0 END) AS 'samsung'
	FROM laptops
	GROUP BY Company;	



-------------------------------------------------------	
6. numerical-categorical
    - compare distribution across categories
	SELECT Company,MIN(price),
	MAX(price),AVG(price),STD(price)
	FROM laptops
	GROUP BY Company;
------------------------------------------------------
8. missing value treatment
- BY MEAN

UPDATE laptops t1
SET t1.Price = (SELECT AVG(Price) FROM (SELECT * FROM laptops) t2) 
WHERE t1.Price IS NULL;

- BY CATEGORIES MEAN

UPDATE laptops T1
SET Price = (SELECT AVG(Price) FROM (SELECT * FROM laptops) T2
WHERE T1.Company = T2.Company )
WHERE Price IS NULL
-----------------------------------------------------------

9. feature engineering
- ppi
ALTER TABLE laptops ADD COLUMN ppi INTEGER;

UPDATE laptops
SET ppi = ROUND(SQRT(resolution_width*resolution_width + resolution_height*resolution_height)/Inches);

- based on inches make a new column by name screen_size
ALTER TABLE laptops ADD COLUMN screen_size VARCHAR(255) AFTER Inches;

UPDATE laptops
SET screen_size = 
CASE 
	WHEN Inches < 14.0 THEN 'small'
    WHEN Inches >= 14.0 AND Inches < 17.0 THEN 'medium'
	ELSE 'large'
END;
------------------------------------------------------------------
10. one hot encoding

SELECT gpu_brand,
CASE WHEN gpu_brand = 'Intel' THEN 1 ELSE 0 END AS 'intel',
CASE WHEN gpu_brand = 'AMD' THEN 1 ELSE 0 END AS 'amd',
CASE WHEN gpu_brand = 'nvidia' THEN 1 ELSE 0 END AS 'nvidia',
CASE WHEN gpu_brand = 'arm' THEN 1 ELSE 0 END AS 'arm'
FROM laptops
